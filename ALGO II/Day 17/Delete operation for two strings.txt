class Solution {
    int[][] dp;
    int n1;
    int n2;
    public int minDistance(String word1, String word2) {
        n1 = word1.length();
        n2 = word2.length();
        dp = new int[n1+1][n2+1];
        for(int[] arr: dp)
            Arrays.fill(arr, -1);
        return minDis(word1, word2, 0, 0);
    }
    
    public int minDis(String str1, String str2, int i, int j){
        int lft1 = n1 - i;
        int lft2 =  n2 - j;
        if(dp[i][j] != -1)
            return dp[i][j];
        if( lft1 == 0 || lft2 == 0)
            dp[i][j] = lft1 | lft2;
        else{
            int min = 0;
            char ch1 = str1.charAt(i);
            char ch2 = str2.charAt(j);
            if(ch1 == ch2){
                int res1 = minDis(str1, str2, i+1, j+1);
                min = res1;
            }else{
                int res1 = minDis(str1, str2, i, j+1);
                int res2 = minDis(str1, str2, i+1, j);
                min = Math.min(res1, res2) + 1;
            }
            dp[i][j] = min;
        }
        return dp[i][j];
    }
}